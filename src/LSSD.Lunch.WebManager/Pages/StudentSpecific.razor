@page "/students/{id}"
@using Microsoft.Extensions.Configuration
@using Services
@using LSSD.Lunch.Extensions
@using System.Configuration
@inject IJSRuntime JSRuntime
@code {

    [Inject]
    StudentService _repo { get; set; }

    [Inject]
    SchoolService _schoolrepo { get; set; }

    [Inject]
    TransactionService _transactionrepo { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    IConfiguration _configuration { get; set; }

    [Parameter]
    public string id { get; set; }

    Student thisStudent = null;

    List<Transaction> _studentTransactions = new List<Transaction>();

    Decimal adjustAmount = 0;

    protected override void OnInitialized()
    {
        if (id != (new Guid()).ToString()) {
            thisStudent = _repo.Get(id);
            _studentTransactions = _transactionrepo.GetForStudentGUID(id).ToList();
        } else {
            thisStudent = new Student();
        }
    }

    protected void HandleInValidSubmit()
    {
        // Do nothing
    }

    protected void HandleValidSubmit()
    {
        // Save
        _repo.InsertOrUpdate(thisStudent);

        // Navigate back
        NavigationManager.NavigateTo("/students");
    }

    protected void OnClick_Delete(Student thisStudent)
    {
        // Save
        _repo.Delete(thisStudent);

        // Navigate back
        NavigationManager.NavigateTo("/students");
    }

    protected async void OnClick_GenerateIDCard(Student thisStudent)
    {
        // Navigate to the API endpoint
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            "lunchcard-" + thisStudent.StudentId + "-" + thisStudent.Name.ToLower().Replace(" ", "").Replace("'","").Replace(",","") + ".docx",
            "/IndividualIDCard/" + thisStudent.Id
            );
    }

    protected void addTransaction(decimal Dollars, string Username) 
    {
        Transaction newTransaction = new Transaction() 
        {
            TimestampUTC = DateTime.UtcNow,
            StudentID = thisStudent.Id,
            StudentNumber = thisStudent.StudentId,
            ItemDescription = "Funds adjusted by " + Username,
            Amount = (decimal)Dollars
        };

        _transactionrepo.InsertOrUpdate(newTransaction);
        _studentTransactions.Add(newTransaction);
        
    }

    protected void OnSubmit_AddTransaction(string Username)
    {
        if (adjustAmount != (decimal)0)
        {
            addTransaction(adjustAmount, Username);  

            // Reset adjust amount
            adjustAmount = 0;     
        }
    }


}

<AuthorizeView Context="user">
    <Authorized Context="Auth">

    <div class="container" style="width: 100%;">

    @if(thisStudent != null) {
        <EditForm Model="@thisStudent" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInValidSubmit">
        <div class="form-group">
            <div class="row">
                <div class="col-sm-3">ID</div>
                <div class="col-sm-6">@thisStudent.Id.ToString()</div>
            </div>
            <div class="form-group row">
                <label for="resourceName" class="col-sm-3">First Name: </label>
                <InputText id="resourceName" class="form-control col-sm-8" @bind-Value="@thisStudent.FirstName"></InputText>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.Name)" />
            </div>
            <div class="form-group row">
                <label for="resourceName" class="col-sm-3">Last Name: </label>
                <InputText id="resourceName" class="form-control col-sm-8" @bind-Value="@thisStudent.LastName"></InputText>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.Name)" />
            </div>

            <div class="form-group row">
                <label for="resourceStudentNumber" class="col-sm-3">Student ID: </label>
                <InputText id="resourceStudentNumber" class="form-control col-sm-8" @bind-Value="@thisStudent.StudentId"></InputText>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.StudentId)" />
            </div>

            <div class="form-group row">
                <label for="resourceHomeRoom" class="col-sm-3">Homeroom: </label>
                <InputText id="resourceHomeRoom" class="form-control col-sm-8" @bind-Value="@thisStudent.HomeRoom"></InputText>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.HomeRoom)" />
            </div>

            <div class="form-group row">
                <label for="resourceMedical" class="col-sm-3">Medical: </label>
                <InputTextArea id="resourceMedical" class="form-control col-sm-8" @bind-Value="@thisStudent.MedicalInfo"></InputTextArea>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.MedicalInfo)" />
            </div>

            <div class="form-group row">
                <label for="resourceSchool" class="col-sm-3">School: </label>
                <InputSelect  id="resourceSchool" class="form-control col-sm-8" @bind-Value="@thisStudent.SchoolId">
                    <option value="@(new Guid())">-</option>
                    @foreach (School school in _schoolrepo.GetAll())
                    {
                        <option value="@(school.Id)">@(school.Name)</option>
                    }
                </InputSelect>
                <ValidationMessage class="offset-sm-3 col-sm-68" For="@(() => thisStudent.SchoolId)" />
            </div>

            <div class="form-group row">
                <label for="resourceEnabled" class="col-sm-3">Active: </label>
                <div class="col-sm-8">
                    <InputCheckbox  id="resourceEnabled" @bind-Value="@thisStudent.IsActive"></InputCheckbox>
                    <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => thisStudent.IsActive)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="resourceMedical" class="col-sm-3">Balance: </label>
                <div class="col-sm-2">
                    @(_studentTransactions.Sum(x => x.Amount).ToString("C"))
                </div>
            </div>

        </div>
        <div class="form-group">
            <div class="form-row">
                <div class="col">
                    <button type="button" class="btn btn-danger btn-block" @onclick="() => OnClick_Delete(thisStudent)">Delete</button>
                </div>
                <div class="col">
                    @if (thisStudent.Id != new Guid()) {
                        <button type="button" class="btn btn-primary btn-block" @onclick="() => OnClick_GenerateIDCard(thisStudent)">ID Card</button>
                    }
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary btn-block" @onclick="() => HandleValidSubmit()">Save</button>
                </div>
            </div>
        </div>

        </EditForm>


        <EditForm Model="@adjustAmount">
        <br/><br/>
        <h2>Add or remove funds</h2>
        <div class="form-group">
            <div class="form-row">
                <div class="col">
                    <InputNumber  id="adjustAmountValue" class="form-control col-sm-8" @bind-Value="@adjustAmount" placeholder="$5.00"></InputNumber>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary btn-block" @onclick="() => OnSubmit_AddTransaction(Auth.User.Identity.Name)">Add</button>
                </div>
            </div>
            <div class="form-row">
                <div class="col" style="text-align: right;">
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(-1,Auth.User.Identity.Name)">-1</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(1,Auth.User.Identity.Name)">+1</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(2,Auth.User.Identity.Name)">+2</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(5,Auth.User.Identity.Name)">+5</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(10,Auth.User.Identity.Name)">+10</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(15,Auth.User.Identity.Name)">+15</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(19,Auth.User.Identity.Name)">+19</button>&nbsp;
                    <button type="button" class="btn btn-primary" @onclick="() => addTransaction(20,Auth.User.Identity.Name)">+20</button>&nbsp;
                </div>
            </div>
        </div>
        </EditForm>

        <br/><br/>
        <h2>Transaction history</h2>
        <p><i>Newest transactions on top</i></p>        
        @foreach(Transaction transaction in _studentTransactions.OrderByDescending(x => x.TimestampUTC))
        {            
            <div class="row">
                <div class="col-sm-4">@(transaction.TimestampUTC.AdjustForTimezone(_configuration["Settings:TimeZone"] ?? string.Empty).ToLongDateString())</div>
                <div class="col-sm-3">@(transaction.TimestampUTC.AdjustForTimezone(_configuration["Settings:TimeZone"] ?? string.Empty).ToLongTimeString())</div>
                <div class="col-sm-3">@(transaction.ItemDescription)</div>
                <div class="col-sm-1" style="text-align: right;">@(transaction.Amount.ToString("C"))</div>
            </div>
        }

    } else {
        <i>Object not found</i>
    }
</div>
    </Authorized>
</AuthorizeView>